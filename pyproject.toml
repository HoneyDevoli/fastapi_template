[project]
name = "fast-api-docker-poetry"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.12.8"
dependencies = [
    "fastapi[standard]<1.0.0,>=0.115.6",
    "passlib[bcrypt]<2.0.0,>=1.7.4",
    "pydantic>2.0",
    "alembic<2.0.0,>=1.14.0",
    "httpx<1.0.0,>=0.25.1",
    "psycopg[binary]<4.0.0,>=3.1.13",
    "pydantic-settings<3.0.0,>=2.2.1",
    "pyjwt<3.0.0,>=2.8.0",
    "tenacity<10.0.0,>=9.0.0",
]

[tool.uv]
dev-dependencies = [
    "pytest<9.0.0,>=8.0.0",
    "ruff<1.0.0,>=0.8.4",
    "pre-commit<5.0.0,>=4.0.0",
    "types-passlib<2.0.0.0,>=1.7.7.20240106",
]

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic", "migrations"]

[tool.ruff]
target-version = "py312"
exclude = ["migrations", "alembic", "venv", ".venv"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.pytest.ini_options]
testpaths = [
    "tests"
]
# Prevents pytest from buffering output until the end of a failed test
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"